// This file was generated by counterfeiter
// counterfeiter -o issh/ssh_fake.go --fake-name Fake issh/ssh.go SSH

package issh

import (
	"sync"

	"golang.org/x/crypto/ssh"
)

//Fake ...
type Fake struct {
	DialStub        func(string, string, *ssh.ClientConfig) (*ssh.Client, error)
	dialMutex       sync.RWMutex
	dialArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 *ssh.ClientConfig
	}
	dialReturns struct {
		result1 *ssh.Client
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

//NewFake is the preferred way to initialise a Fake
func NewFake() *Fake {
	return new(Fake)
}

//Dial ...
func (fake *Fake) Dial(arg1 string, arg2 string, arg3 *ssh.ClientConfig) (*ssh.Client, error) {
	fake.dialMutex.Lock()
	fake.dialArgsForCall = append(fake.dialArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 *ssh.ClientConfig
	}{arg1, arg2, arg3})
	fake.recordInvocation("Dial", []interface{}{arg1, arg2, arg3})
	fake.dialMutex.Unlock()
	if fake.DialStub != nil {
		return fake.DialStub(arg1, arg2, arg3)
	}
	return fake.dialReturns.result1, fake.dialReturns.result2
}

//DialCallCount ...
func (fake *Fake) DialCallCount() int {
	fake.dialMutex.RLock()
	defer fake.dialMutex.RUnlock()
	return len(fake.dialArgsForCall)
}

//DialArgsForCall ...
func (fake *Fake) DialArgsForCall(i int) (string, string, *ssh.ClientConfig) {
	fake.dialMutex.RLock()
	defer fake.dialMutex.RUnlock()
	return fake.dialArgsForCall[i].arg1, fake.dialArgsForCall[i].arg2, fake.dialArgsForCall[i].arg3
}

//DialReturns ...
func (fake *Fake) DialReturns(result1 *ssh.Client, result2 error) {
	fake.DialStub = nil
	fake.dialReturns = struct {
		result1 *ssh.Client
		result2 error
	}{result1, result2}
}

//Invocations ...
func (fake *Fake) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.dialMutex.RLock()
	defer fake.dialMutex.RUnlock()
	return fake.invocations
}

func (fake *Fake) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ SSH = new(Fake)
