// This file was generated by counterfeiter
package iuser

import (
	"os/user"
	"sync"

	"github.com/BooleanCat/igo/os/user"
)

type UserFake struct {
	LookupStub        func(string) (*user.User, error)
	lookupMutex       sync.RWMutex
	lookupArgsForCall []struct {
		arg1 string
	}
	lookupReturns struct {
		result1 *user.User
		result2 error
	}
	LookupGroupStub        func(string) (*user.Group, error)
	lookupGroupMutex       sync.RWMutex
	lookupGroupArgsForCall []struct {
		arg1 string
	}
	lookupGroupReturns struct {
		result1 *user.Group
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *UserFake) Lookup(arg1 string) (*user.User, error) {
	fake.lookupMutex.Lock()
	fake.lookupArgsForCall = append(fake.lookupArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("Lookup", []interface{}{arg1})
	fake.lookupMutex.Unlock()
	if fake.LookupStub != nil {
		return fake.LookupStub(arg1)
	} else {
		return fake.lookupReturns.result1, fake.lookupReturns.result2
	}
}

func (fake *UserFake) LookupCallCount() int {
	fake.lookupMutex.RLock()
	defer fake.lookupMutex.RUnlock()
	return len(fake.lookupArgsForCall)
}

func (fake *UserFake) LookupArgsForCall(i int) string {
	fake.lookupMutex.RLock()
	defer fake.lookupMutex.RUnlock()
	return fake.lookupArgsForCall[i].arg1
}

func (fake *UserFake) LookupReturns(result1 *user.User, result2 error) {
	fake.LookupStub = nil
	fake.lookupReturns = struct {
		result1 *user.User
		result2 error
	}{result1, result2}
}

func (fake *UserFake) LookupGroup(arg1 string) (*user.Group, error) {
	fake.lookupGroupMutex.Lock()
	fake.lookupGroupArgsForCall = append(fake.lookupGroupArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("LookupGroup", []interface{}{arg1})
	fake.lookupGroupMutex.Unlock()
	if fake.LookupGroupStub != nil {
		return fake.LookupGroupStub(arg1)
	} else {
		return fake.lookupGroupReturns.result1, fake.lookupGroupReturns.result2
	}
}

func (fake *UserFake) LookupGroupCallCount() int {
	fake.lookupGroupMutex.RLock()
	defer fake.lookupGroupMutex.RUnlock()
	return len(fake.lookupGroupArgsForCall)
}

func (fake *UserFake) LookupGroupArgsForCall(i int) string {
	fake.lookupGroupMutex.RLock()
	defer fake.lookupGroupMutex.RUnlock()
	return fake.lookupGroupArgsForCall[i].arg1
}

func (fake *UserFake) LookupGroupReturns(result1 *user.Group, result2 error) {
	fake.LookupGroupStub = nil
	fake.lookupGroupReturns = struct {
		result1 *user.Group
		result2 error
	}{result1, result2}
}

func (fake *UserFake) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.lookupMutex.RLock()
	defer fake.lookupMutex.RUnlock()
	fake.lookupGroupMutex.RLock()
	defer fake.lookupGroupMutex.RUnlock()
	return fake.invocations
}

func (fake *UserFake) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ iuser.User = new(UserFake)
